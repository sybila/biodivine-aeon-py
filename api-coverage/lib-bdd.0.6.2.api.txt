pub mod biodivine_lib_bdd
pub mod biodivine_lib_bdd::boolean_expression
pub enum biodivine_lib_bdd::boolean_expression::BooleanExpression
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::And(alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>, alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Cond(alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>, alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>, alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Const(bool)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Iff(alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>, alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Imp(alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>, alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Not(alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Or(alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>, alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Variable(alloc::string::String)
pub biodivine_lib_bdd::boolean_expression::BooleanExpression::Xor(alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>, alloc::boxed::Box<biodivine_lib_bdd::boolean_expression::BooleanExpression>)
impl biodivine_lib_bdd::boolean_expression::BooleanExpression
pub fn biodivine_lib_bdd::boolean_expression::BooleanExpression::support_set(&self) -> std::collections::hash::set::HashSet<alloc::string::String>
impl core::convert::TryFrom<&str> for biodivine_lib_bdd::boolean_expression::BooleanExpression
pub type biodivine_lib_bdd::boolean_expression::BooleanExpression::Error = alloc::string::String
pub fn biodivine_lib_bdd::boolean_expression::BooleanExpression::try_from(value: &str) -> core::result::Result<Self, Self::Error>
impl core::fmt::Display for biodivine_lib_bdd::boolean_expression::BooleanExpression
pub fn biodivine_lib_bdd::boolean_expression::BooleanExpression::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::result::Result<(), core::fmt::Error>
pub mod biodivine_lib_bdd::op_function
pub fn biodivine_lib_bdd::op_function::and(l: core::option::Option<bool>, r: core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::op_function::and_not(l: core::option::Option<bool>, r: core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::op_function::iff(l: core::option::Option<bool>, r: core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::op_function::imp(l: core::option::Option<bool>, r: core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::op_function::or(l: core::option::Option<bool>, r: core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::op_function::xor(l: core::option::Option<bool>, r: core::option::Option<bool>) -> core::option::Option<bool>
pub mod biodivine_lib_bdd::random_sampling
pub struct biodivine_lib_bdd::random_sampling::NaiveSampler<R: rand::rng::Rng + core::marker::Sized>(_)
impl<R: rand::rng::Rng + core::marker::Sized> biodivine_lib_bdd::random_sampling::SamplingMethod for biodivine_lib_bdd::random_sampling::NaiveSampler<R>
pub fn biodivine_lib_bdd::random_sampling::NaiveSampler<R>::sample_decision_node(&mut self, _node: biodivine_lib_bdd::BddPointer) -> bool
pub fn biodivine_lib_bdd::random_sampling::NaiveSampler<R>::sample_skipped_node(&mut self, _var: biodivine_lib_bdd::BddVariable) -> bool
impl<R: rand::rng::Rng + core::marker::Sized> core::convert::From<R> for biodivine_lib_bdd::random_sampling::NaiveSampler<R>
pub fn biodivine_lib_bdd::random_sampling::NaiveSampler<R>::from(value: R) -> Self
pub struct biodivine_lib_bdd::random_sampling::UniformValuationSampler<R: rand::rng::Rng + core::marker::Sized>
impl<R: rand::rng::Rng + core::marker::Sized> biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>
pub fn biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>::from_raw_parts(rng: R, ratios: alloc::vec::Vec<num_rational::BigRational>) -> Self
pub fn biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>::into_ratios(self) -> alloc::vec::Vec<num_rational::BigRational>
impl<R: rand::rng::Rng + core::marker::Sized> biodivine_lib_bdd::random_sampling::SamplingMethod for biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>
pub fn biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>::sample_decision_node(&mut self, node: biodivine_lib_bdd::BddPointer) -> bool
pub fn biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>::sample_skipped_node(&mut self, _var: biodivine_lib_bdd::BddVariable) -> bool
pub trait biodivine_lib_bdd::random_sampling::SamplingMethod
pub fn biodivine_lib_bdd::random_sampling::SamplingMethod::sample_decision_node(&mut self, node: biodivine_lib_bdd::BddPointer) -> bool
pub fn biodivine_lib_bdd::random_sampling::SamplingMethod::sample_skipped_node(&mut self, var: biodivine_lib_bdd::BddVariable) -> bool
impl<R: rand::rng::Rng + core::marker::Sized> biodivine_lib_bdd::random_sampling::SamplingMethod for biodivine_lib_bdd::random_sampling::NaiveSampler<R>
pub fn biodivine_lib_bdd::random_sampling::NaiveSampler<R>::sample_decision_node(&mut self, _node: biodivine_lib_bdd::BddPointer) -> bool
pub fn biodivine_lib_bdd::random_sampling::NaiveSampler<R>::sample_skipped_node(&mut self, _var: biodivine_lib_bdd::BddVariable) -> bool
impl<R: rand::rng::Rng + core::marker::Sized> biodivine_lib_bdd::random_sampling::SamplingMethod for biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>
pub fn biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>::sample_decision_node(&mut self, node: biodivine_lib_bdd::BddPointer) -> bool
pub fn biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>::sample_skipped_node(&mut self, _var: biodivine_lib_bdd::BddVariable) -> bool
pub mod biodivine_lib_bdd::tutorial
pub mod biodivine_lib_bdd::tutorial::p01_bdd_intro
pub mod biodivine_lib_bdd::tutorial::p02_bdd_variable_set
pub mod biodivine_lib_bdd::tutorial::p03_bdd_manipulation
pub mod biodivine_lib_bdd::tutorial::p04_bdd_serialisation
pub mod biodivine_lib_bdd::tutorial::p05_bdd_valuations
pub mod biodivine_lib_bdd::tutorial::p06_bdd_advanced_operations
pub macro biodivine_lib_bdd::bdd!
pub struct biodivine_lib_bdd::Bdd(_)
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::_to_optimized_dnf<E, I: core::ops::function::Fn(&[biodivine_lib_bdd::BddPartialValuation]) -> core::result::Result<(), E>>(&self, interrupt: &I) -> core::result::Result<alloc::vec::Vec<biodivine_lib_bdd::BddPartialValuation>, E>
pub fn biodivine_lib_bdd::Bdd::to_dnf(&self) -> alloc::vec::Vec<biodivine_lib_bdd::BddPartialValuation>
pub fn biodivine_lib_bdd::Bdd::to_optimized_dnf(&self) -> alloc::vec::Vec<biodivine_lib_bdd::BddPartialValuation>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::and(&self, right: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::and_not(&self, right: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::binary_op<T>(left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, op_function: T) -> biodivine_lib_bdd::Bdd where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::binary_op_with_limit<T>(limit: usize, left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, op_function: T) -> core::option::Option<biodivine_lib_bdd::Bdd> where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::check_binary_op<T>(limit: usize, left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, op_function: T) -> core::option::Option<(bool, usize)> where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::check_fused_binary_flip_op<T>(limit: usize, left: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), right: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), flip_output: core::option::Option<biodivine_lib_bdd::BddVariable>, op_function: T) -> core::option::Option<(bool, usize)> where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::fused_binary_flip_op<T>(left: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), right: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), flip_output: core::option::Option<biodivine_lib_bdd::BddVariable>, op_function: T) -> biodivine_lib_bdd::Bdd where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::fused_binary_flip_op_with_limit<T>(limit: usize, left: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), right: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), flip_output: core::option::Option<biodivine_lib_bdd::BddVariable>, op_function: T) -> core::option::Option<biodivine_lib_bdd::Bdd> where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::if_then_else(a: &biodivine_lib_bdd::Bdd, b: &biodivine_lib_bdd::Bdd, c: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::iff(&self, right: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::imp(&self, right: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::into_not(self) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::not(&self) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::or(&self, right: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::xor(&self, right: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::as_bool(&self) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::cardinality(&self) -> f64
pub fn biodivine_lib_bdd::Bdd::exact_cardinality(&self) -> num_bigint::biguint::BigUint
pub fn biodivine_lib_bdd::Bdd::exact_clause_cardinality(&self) -> num_bigint::biguint::BigUint
pub fn biodivine_lib_bdd::Bdd::from_nodes(data: &[biodivine_lib_bdd::BddNode]) -> core::result::Result<biodivine_lib_bdd::Bdd, alloc::string::String>
pub fn biodivine_lib_bdd::Bdd::high_link_of(&self, node: biodivine_lib_bdd::BddPointer) -> biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::Bdd::is_clause(&self) -> bool
pub fn biodivine_lib_bdd::Bdd::is_false(&self) -> bool
pub fn biodivine_lib_bdd::Bdd::is_true(&self) -> bool
pub fn biodivine_lib_bdd::Bdd::is_valuation(&self) -> bool
pub fn biodivine_lib_bdd::Bdd::low_link_of(&self, node: biodivine_lib_bdd::BddPointer) -> biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::Bdd::num_vars(&self) -> u16
pub fn biodivine_lib_bdd::Bdd::pointers(&self) -> core::iter::adapters::map::Map<core::ops::range::Range<usize>, fn(usize) -> biodivine_lib_bdd::BddPointer>
pub unsafe fn biodivine_lib_bdd::Bdd::rename_variable(&mut self, old_id: biodivine_lib_bdd::BddVariable, new_id: biodivine_lib_bdd::BddVariable)
pub unsafe fn biodivine_lib_bdd::Bdd::rename_variables(&mut self, permutation: &std::collections::hash::map::HashMap<biodivine_lib_bdd::BddVariable, biodivine_lib_bdd::BddVariable>)
pub fn biodivine_lib_bdd::Bdd::root_pointer(&self) -> biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::Bdd::sat_witness(&self) -> core::option::Option<biodivine_lib_bdd::BddValuation>
pub unsafe fn biodivine_lib_bdd::Bdd::set_num_vars(&mut self, new_value: u16)
pub fn biodivine_lib_bdd::Bdd::size(&self) -> usize
pub fn biodivine_lib_bdd::Bdd::size_per_variable(&self) -> std::collections::hash::map::HashMap<biodivine_lib_bdd::BddVariable, usize>
pub fn biodivine_lib_bdd::Bdd::substitute(&self, var: biodivine_lib_bdd::BddVariable, function: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::support_set(&self) -> std::collections::hash::set::HashSet<biodivine_lib_bdd::BddVariable>
pub fn biodivine_lib_bdd::Bdd::support_set_contains(&self, variable: &biodivine_lib_bdd::BddVariable) -> bool
pub fn biodivine_lib_bdd::Bdd::to_boolean_expression(&self, variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::boolean_expression::BooleanExpression
pub fn biodivine_lib_bdd::Bdd::to_nodes(self) -> alloc::vec::Vec<biodivine_lib_bdd::BddNode>
pub fn biodivine_lib_bdd::Bdd::validate(&self) -> core::result::Result<(), alloc::string::String>
pub fn biodivine_lib_bdd::Bdd::var_of(&self, node: biodivine_lib_bdd::BddPointer) -> biodivine_lib_bdd::BddVariable
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::binary_op_nested<F1, F2, Trigger>(left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, trigger: Trigger, outer_op: F1, inner_op: F2) -> biodivine_lib_bdd::Bdd where F1: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>, F2: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>, Trigger: core::ops::function::Fn(biodivine_lib_bdd::BddVariable) -> bool
pub fn biodivine_lib_bdd::Bdd::binary_op_with_exists<F>(left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, op: F, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd where F: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::binary_op_with_exists_trigger<F, Trigger>(left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, trigger: Trigger, op: F) -> biodivine_lib_bdd::Bdd where Trigger: core::ops::function::Fn(biodivine_lib_bdd::BddVariable) -> bool, F: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::binary_op_with_for_all<F>(left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, op: F, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd where F: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::binary_op_with_for_all_trigger<F, Trigger>(left: &biodivine_lib_bdd::Bdd, right: &biodivine_lib_bdd::Bdd, trigger: Trigger, op: F) -> biodivine_lib_bdd::Bdd where Trigger: core::ops::function::Fn(biodivine_lib_bdd::BddVariable) -> bool, F: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::cmp_cardinality(a: &biodivine_lib_bdd::Bdd, b: &biodivine_lib_bdd::Bdd) -> core::cmp::Ordering
pub fn biodivine_lib_bdd::Bdd::cmp_cardinality_strict(a: &biodivine_lib_bdd::Bdd, b: &biodivine_lib_bdd::Bdd) -> core::option::Option<core::cmp::Ordering>
pub fn biodivine_lib_bdd::Bdd::cmp_implies(a: &biodivine_lib_bdd::Bdd, b: &biodivine_lib_bdd::Bdd) -> core::option::Option<core::cmp::Ordering>
pub fn biodivine_lib_bdd::Bdd::cmp_size(a: &biodivine_lib_bdd::Bdd, b: &biodivine_lib_bdd::Bdd) -> core::cmp::Ordering
pub fn biodivine_lib_bdd::Bdd::cmp_structural(a: &biodivine_lib_bdd::Bdd, b: &biodivine_lib_bdd::Bdd) -> core::cmp::Ordering
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::eval_in(&self, valuation: &biodivine_lib_bdd::BddValuation) -> bool
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::exists(&self, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::exists_trigger<Trigger: core::ops::function::Fn(biodivine_lib_bdd::BddVariable) -> bool>(&self, trigger: Trigger) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::for_all(&self, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::for_all_trigger<Trigger: core::ops::function::Fn(biodivine_lib_bdd::BddVariable) -> bool>(&self, trigger: Trigger) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::pick(&self, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::pick_random<R: rand::rng::Rng>(&self, variables: &[biodivine_lib_bdd::BddVariable], rng: &mut R) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::project(&self, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::restrict(&self, variables: &[(biodivine_lib_bdd::BddVariable, bool)]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::restrict_valuation(&self, valuation: &biodivine_lib_bdd::BddPartialValuation) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::select(&self, variables: &[(biodivine_lib_bdd::BddVariable, bool)]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::select_valuation(&self, valuation: &biodivine_lib_bdd::BddPartialValuation) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::var_exists(&self, variable: biodivine_lib_bdd::BddVariable) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::var_for_all(&self, variable: biodivine_lib_bdd::BddVariable) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::var_pick(&self, variable: biodivine_lib_bdd::BddVariable) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::var_pick_random<R: rand::rng::Rng>(&self, variable: biodivine_lib_bdd::BddVariable, rng: &mut R) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::var_project(&self, variable: biodivine_lib_bdd::BddVariable) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::var_restrict(&self, variable: biodivine_lib_bdd::BddVariable, value: bool) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::var_select(&self, variable: biodivine_lib_bdd::BddVariable, value: bool) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::first_clause(&self) -> core::option::Option<biodivine_lib_bdd::BddPartialValuation>
pub fn biodivine_lib_bdd::Bdd::first_valuation(&self) -> core::option::Option<biodivine_lib_bdd::BddValuation>
pub fn biodivine_lib_bdd::Bdd::last_clause(&self) -> core::option::Option<biodivine_lib_bdd::BddPartialValuation>
pub fn biodivine_lib_bdd::Bdd::last_valuation(&self) -> core::option::Option<biodivine_lib_bdd::BddValuation>
pub fn biodivine_lib_bdd::Bdd::most_fixed_clause(&self) -> core::option::Option<biodivine_lib_bdd::BddPartialValuation>
pub fn biodivine_lib_bdd::Bdd::most_free_clause(&self) -> core::option::Option<biodivine_lib_bdd::BddPartialValuation>
pub fn biodivine_lib_bdd::Bdd::most_negative_valuation(&self) -> core::option::Option<biodivine_lib_bdd::BddValuation>
pub fn biodivine_lib_bdd::Bdd::most_positive_valuation(&self) -> core::option::Option<biodivine_lib_bdd::BddValuation>
pub fn biodivine_lib_bdd::Bdd::necessary_clause(&self) -> core::option::Option<biodivine_lib_bdd::BddPartialValuation>
pub fn biodivine_lib_bdd::Bdd::random_clause<R: rand::rng::Rng>(&self, rng: &mut R) -> core::option::Option<biodivine_lib_bdd::BddPartialValuation>
pub fn biodivine_lib_bdd::Bdd::random_valuation<R: rand::rng::Rng>(&self, rng: &mut R) -> core::option::Option<biodivine_lib_bdd::BddValuation>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from_bytes(data: &mut &[u8]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from_string(bdd: &str) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::read_as_bytes<R: std::io::Read>(input: &mut R) -> core::result::Result<biodivine_lib_bdd::Bdd, std::io::error::Error>
pub fn biodivine_lib_bdd::Bdd::read_as_string<R: std::io::Read>(input: &mut R) -> core::result::Result<biodivine_lib_bdd::Bdd, alloc::string::String>
pub fn biodivine_lib_bdd::Bdd::to_bytes(&self) -> alloc::vec::Vec<u8>
pub fn biodivine_lib_bdd::Bdd::write_as_bytes<W: std::io::Write>(&self, output: &mut W) -> core::result::Result<(), std::io::error::Error>
pub fn biodivine_lib_bdd::Bdd::write_as_string<W: std::io::Write>(&self, output: &mut W) -> core::result::Result<(), std::io::error::Error>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::fused_ternary_flip_op<T>(a: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), b: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), c: (&biodivine_lib_bdd::Bdd, core::option::Option<biodivine_lib_bdd::BddVariable>), flip_output: core::option::Option<biodivine_lib_bdd::BddVariable>, op_function: T) -> biodivine_lib_bdd::Bdd where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::Bdd::ternary_op<T>(a: &biodivine_lib_bdd::Bdd, b: &biodivine_lib_bdd::Bdd, c: &biodivine_lib_bdd::Bdd, op_function: T) -> biodivine_lib_bdd::Bdd where T: core::ops::function::Fn(core::option::Option<bool>, core::option::Option<bool>, core::option::Option<bool>) -> core::option::Option<bool>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::into_sat_clauses(self) -> biodivine_lib_bdd::OwnedBddPathIterator
pub fn biodivine_lib_bdd::Bdd::into_sat_valuations(self) -> biodivine_lib_bdd::OwnedBddSatisfyingValuations
pub fn biodivine_lib_bdd::Bdd::sat_clauses(&self) -> biodivine_lib_bdd::BddPathIterator<'_>
pub fn biodivine_lib_bdd::Bdd::sat_valuations(&self) -> biodivine_lib_bdd::BddSatisfyingValuations<'_>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::mk_uniform_valuation_sampler<R: rand::rng::Rng + core::marker::Sized>(&self, rng: R) -> biodivine_lib_bdd::random_sampling::UniformValuationSampler<R>
pub fn biodivine_lib_bdd::Bdd::random_valuation_sample<S: biodivine_lib_bdd::random_sampling::SamplingMethod>(&self, sampling_method: &mut S) -> core::option::Option<biodivine_lib_bdd::BddValuation>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::node_valuation_weights(&self) -> alloc::vec::Vec<num_bigint::biguint::BigUint>
pub fn biodivine_lib_bdd::Bdd::overapproximate(&self, to_eliminate: &[biodivine_lib_bdd::BddPointer]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::overapproximate_to_cardinality(&self, target_cardinality: &num_bigint::biguint::BigUint) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::overapproximate_to_size(&self, target_size: usize) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::underapproximate(&self, to_eliminate: &[biodivine_lib_bdd::BddPointer]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::underapproximate_to_cardinality(&self, target_cardinality: &num_bigint::biguint::BigUint) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::underapproximate_to_size(&self, target_size: usize) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::to_cnf(&self) -> alloc::vec::Vec<biodivine_lib_bdd::BddPartialValuation>
impl biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::to_dot_string(&self, variables: &biodivine_lib_bdd::BddVariableSet, zero_pruned: bool) -> alloc::string::String
pub fn biodivine_lib_bdd::Bdd::write_as_dot_string<W: std::io::Write>(&self, output: &mut W, variables: &biodivine_lib_bdd::BddVariableSet, zero_pruned: bool) -> core::result::Result<(), std::io::error::Error>
impl biodivine_lib_bdd::IntoBdd for &biodivine_lib_bdd::Bdd
pub fn &biodivine_lib_bdd::Bdd::into_bdd(self, _variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::IntoBdd for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::into_bdd(self, _variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd
impl core::convert::From<biodivine_lib_bdd::Bdd> for biodivine_lib_bdd::OwnedBddPathIterator
pub fn biodivine_lib_bdd::OwnedBddPathIterator::from(value: biodivine_lib_bdd::Bdd) -> Self
impl core::convert::From<biodivine_lib_bdd::Bdd> for biodivine_lib_bdd::OwnedBddSatisfyingValuations
pub fn biodivine_lib_bdd::OwnedBddSatisfyingValuations::from(value: biodivine_lib_bdd::Bdd) -> Self
impl core::convert::From<biodivine_lib_bdd::BddValuation> for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from(valuation: biodivine_lib_bdd::BddValuation) -> Self
impl core::convert::From<biodivine_lib_bdd::OwnedBddPathIterator> for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from(value: biodivine_lib_bdd::OwnedBddPathIterator) -> Self
impl core::convert::From<biodivine_lib_bdd::OwnedBddSatisfyingValuations> for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from(value: biodivine_lib_bdd::OwnedBddSatisfyingValuations) -> Self
impl core::fmt::Display for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::result::Result<(), core::fmt::Error>
pub struct biodivine_lib_bdd::BddNode
pub biodivine_lib_bdd::BddNode::high_link: biodivine_lib_bdd::BddPointer
pub biodivine_lib_bdd::BddNode::low_link: biodivine_lib_bdd::BddPointer
pub biodivine_lib_bdd::BddNode::var: biodivine_lib_bdd::BddVariable
impl biodivine_lib_bdd::BddNode
pub fn biodivine_lib_bdd::BddNode::is_one(&self) -> bool
pub fn biodivine_lib_bdd::BddNode::is_terminal(&self) -> bool
pub fn biodivine_lib_bdd::BddNode::is_zero(&self) -> bool
impl biodivine_lib_bdd::BddNode
pub fn biodivine_lib_bdd::BddNode::mk_node(var: biodivine_lib_bdd::BddVariable, low_link: biodivine_lib_bdd::BddPointer, high_link: biodivine_lib_bdd::BddPointer) -> biodivine_lib_bdd::BddNode
pub fn biodivine_lib_bdd::BddNode::mk_one(num_vars: u16) -> biodivine_lib_bdd::BddNode
pub fn biodivine_lib_bdd::BddNode::mk_zero(num_vars: u16) -> biodivine_lib_bdd::BddNode
pub struct biodivine_lib_bdd::BddPartialValuation(_)
impl biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::cardinality(&self) -> u16
pub fn biodivine_lib_bdd::BddPartialValuation::empty() -> biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::extends(&self, valuation: &biodivine_lib_bdd::BddPartialValuation) -> bool
pub fn biodivine_lib_bdd::BddPartialValuation::from_values(values: &[(biodivine_lib_bdd::BddVariable, bool)]) -> biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::from_values_iter<I: core::iter::traits::iterator::Iterator<Item = (biodivine_lib_bdd::BddVariable, bool)>>(values: I) -> biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::get_value(&self, id: biodivine_lib_bdd::BddVariable) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::BddPartialValuation::has_value(&self, id: biodivine_lib_bdd::BddVariable) -> bool
pub fn biodivine_lib_bdd::BddPartialValuation::is_empty(&self) -> bool
pub fn biodivine_lib_bdd::BddPartialValuation::last_fixed_variable(&self) -> core::option::Option<biodivine_lib_bdd::BddVariable>
pub fn biodivine_lib_bdd::BddPartialValuation::set_value(&mut self, id: biodivine_lib_bdd::BddVariable, value: bool)
pub fn biodivine_lib_bdd::BddPartialValuation::to_values(&self) -> alloc::vec::Vec<(biodivine_lib_bdd::BddVariable, bool)>
pub fn biodivine_lib_bdd::BddPartialValuation::unset_value(&mut self, id: biodivine_lib_bdd::BddVariable)
impl core::cmp::Eq for biodivine_lib_bdd::BddPartialValuation
impl core::cmp::PartialEq for biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::eq(&self, other: &Self) -> bool
impl core::convert::From<biodivine_lib_bdd::BddValuation> for biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::from(value: biodivine_lib_bdd::BddValuation) -> Self
impl core::convert::TryFrom<biodivine_lib_bdd::BddPartialValuation> for biodivine_lib_bdd::BddValuation
pub type biodivine_lib_bdd::BddValuation::Error = ()
pub fn biodivine_lib_bdd::BddValuation::try_from(value: biodivine_lib_bdd::BddPartialValuation) -> core::result::Result<Self, Self::Error>
impl core::default::Default for biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::default() -> Self
impl core::hash::Hash for biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::hash<H: core::hash::Hasher>(&self, state: &mut H)
impl core::ops::index::Index<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddPartialValuation
pub type biodivine_lib_bdd::BddPartialValuation::Output = core::option::Option<bool>
pub fn biodivine_lib_bdd::BddPartialValuation::index(&self, index: biodivine_lib_bdd::BddVariable) -> &Self::Output
impl core::ops::index::IndexMut<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::index_mut(&mut self, index: biodivine_lib_bdd::BddVariable) -> &mut Self::Output
pub struct biodivine_lib_bdd::BddPathIterator<'a>
impl biodivine_lib_bdd::BddPathIterator<'_>
pub fn biodivine_lib_bdd::BddPathIterator<'_>::new(bdd: &biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::BddPathIterator<'_>
impl core::iter::traits::iterator::Iterator for biodivine_lib_bdd::BddPathIterator<'_>
pub type biodivine_lib_bdd::BddPathIterator<'_>::Item = biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPathIterator<'_>::next(&mut self) -> core::option::Option<Self::Item>
pub struct biodivine_lib_bdd::BddPointer(_)
impl biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::BddPointer::as_bool(&self) -> core::option::Option<bool>
pub fn biodivine_lib_bdd::BddPointer::flip_if_terminal(&mut self)
pub fn biodivine_lib_bdd::BddPointer::from_bool(value: bool) -> biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::BddPointer::from_index(index: usize) -> biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::BddPointer::from_le_bytes(bytes: [u8; 4]) -> biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::BddPointer::is_one(&self) -> bool
pub fn biodivine_lib_bdd::BddPointer::is_terminal(&self) -> bool
pub fn biodivine_lib_bdd::BddPointer::is_zero(&self) -> bool
pub fn biodivine_lib_bdd::BddPointer::one() -> biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::BddPointer::to_index(self) -> usize
pub fn biodivine_lib_bdd::BddPointer::to_le_bytes(self) -> [u8; 4]
pub fn biodivine_lib_bdd::BddPointer::zero() -> biodivine_lib_bdd::BddPointer
impl core::fmt::Display for biodivine_lib_bdd::BddPointer
pub fn biodivine_lib_bdd::BddPointer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::result::Result<(), core::fmt::Error>
pub struct biodivine_lib_bdd::BddSatisfyingValuations<'a>
impl core::iter::traits::iterator::Iterator for biodivine_lib_bdd::BddSatisfyingValuations<'_>
pub type biodivine_lib_bdd::BddSatisfyingValuations<'_>::Item = biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddSatisfyingValuations<'_>::next(&mut self) -> core::option::Option<Self::Item>
pub struct biodivine_lib_bdd::BddValuation(_)
impl biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::all_false(num_vars: u16) -> biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::all_true(num_vars: u16) -> biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::as_vector(&self) -> &[bool]
pub fn biodivine_lib_bdd::BddValuation::as_vector_mut(&mut self) -> &mut alloc::vec::Vec<bool>
pub fn biodivine_lib_bdd::BddValuation::clear(&mut self, variable: biodivine_lib_bdd::BddVariable)
pub fn biodivine_lib_bdd::BddValuation::extends(&self, valuation: &biodivine_lib_bdd::BddPartialValuation) -> bool
pub fn biodivine_lib_bdd::BddValuation::flip_value(&mut self, variable: biodivine_lib_bdd::BddVariable)
pub fn biodivine_lib_bdd::BddValuation::into_vector(self) -> alloc::vec::Vec<bool>
pub fn biodivine_lib_bdd::BddValuation::mk_bdd(&self) -> biodivine_lib_bdd::Bdd
pub const fn biodivine_lib_bdd::BddValuation::new(values: alloc::vec::Vec<bool>) -> biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::num_vars(&self) -> u16
pub fn biodivine_lib_bdd::BddValuation::set(&mut self, variable: biodivine_lib_bdd::BddVariable)
pub fn biodivine_lib_bdd::BddValuation::set_value(&mut self, variable: biodivine_lib_bdd::BddVariable, value: bool)
pub fn biodivine_lib_bdd::BddValuation::to_partial_valuation(&self) -> biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddValuation::to_values(&self) -> alloc::vec::Vec<(biodivine_lib_bdd::BddVariable, bool)>
pub fn biodivine_lib_bdd::BddValuation::value(&self, variable: biodivine_lib_bdd::BddVariable) -> bool
pub fn biodivine_lib_bdd::BddValuation::vector(self) -> alloc::vec::Vec<bool>
impl core::borrow::Borrow<[bool]> for biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::borrow(&self) -> &[bool]
impl core::convert::From<biodivine_lib_bdd::BddValuation> for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from(valuation: biodivine_lib_bdd::BddValuation) -> Self
impl core::convert::From<biodivine_lib_bdd::BddValuation> for biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::from(value: biodivine_lib_bdd::BddValuation) -> Self
impl core::convert::TryFrom<biodivine_lib_bdd::BddPartialValuation> for biodivine_lib_bdd::BddValuation
pub type biodivine_lib_bdd::BddValuation::Error = ()
pub fn biodivine_lib_bdd::BddValuation::try_from(value: biodivine_lib_bdd::BddPartialValuation) -> core::result::Result<Self, Self::Error>
impl core::fmt::Display for biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::result::Result<(), core::fmt::Error>
impl core::ops::index::Index<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddValuation
pub type biodivine_lib_bdd::BddValuation::Output = bool
pub fn biodivine_lib_bdd::BddValuation::index(&self, index: biodivine_lib_bdd::BddVariable) -> &Self::Output
impl core::ops::index::IndexMut<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::index_mut(&mut self, index: biodivine_lib_bdd::BddVariable) -> &mut Self::Output
pub struct biodivine_lib_bdd::BddValuationIterator(_)
impl biodivine_lib_bdd::BddValuationIterator
pub fn biodivine_lib_bdd::BddValuationIterator::new(num_vars: u16) -> biodivine_lib_bdd::BddValuationIterator
impl core::iter::traits::iterator::Iterator for biodivine_lib_bdd::BddValuationIterator
pub type biodivine_lib_bdd::BddValuationIterator::Item = biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuationIterator::next(&mut self) -> core::option::Option<Self::Item>
pub struct biodivine_lib_bdd::BddVariable(_)
impl biodivine_lib_bdd::BddVariable
pub fn biodivine_lib_bdd::BddVariable::from_index(index: usize) -> biodivine_lib_bdd::BddVariable
pub fn biodivine_lib_bdd::BddVariable::to_index(self) -> usize
impl biodivine_lib_bdd::IntoBdd for biodivine_lib_bdd::BddVariable
pub fn biodivine_lib_bdd::BddVariable::into_bdd(self, variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd
impl core::fmt::Display for biodivine_lib_bdd::BddVariable
pub fn biodivine_lib_bdd::BddVariable::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::result::Result<(), core::fmt::Error>
impl core::ops::index::Index<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddPartialValuation
pub type biodivine_lib_bdd::BddPartialValuation::Output = core::option::Option<bool>
pub fn biodivine_lib_bdd::BddPartialValuation::index(&self, index: biodivine_lib_bdd::BddVariable) -> &Self::Output
impl core::ops::index::Index<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddValuation
pub type biodivine_lib_bdd::BddValuation::Output = bool
pub fn biodivine_lib_bdd::BddValuation::index(&self, index: biodivine_lib_bdd::BddVariable) -> &Self::Output
impl core::ops::index::IndexMut<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::BddPartialValuation::index_mut(&mut self, index: biodivine_lib_bdd::BddVariable) -> &mut Self::Output
impl core::ops::index::IndexMut<biodivine_lib_bdd::BddVariable> for biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::BddValuation::index_mut(&mut self, index: biodivine_lib_bdd::BddVariable) -> &mut Self::Output
pub struct biodivine_lib_bdd::BddVariableSet
impl biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::eval_expression(&self, expression: &biodivine_lib_bdd::boolean_expression::BooleanExpression) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::eval_expression_string(&self, expression: &str) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::safe_eval_expression(&self, expression: &biodivine_lib_bdd::boolean_expression::BooleanExpression) -> core::option::Option<biodivine_lib_bdd::Bdd>
impl biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::mk_cnf(&self, cnf: &[biodivine_lib_bdd::BddPartialValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_cnf_ref(&self, cnf: &[&biodivine_lib_bdd::BddPartialValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_cnf_valuation(&self, cnf: &[biodivine_lib_bdd::BddValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_cnf_valuation_ref(&self, cnf: &[&biodivine_lib_bdd::BddValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_conjunctive_clause(&self, clause: &biodivine_lib_bdd::BddPartialValuation) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_disjunctive_clause(&self, clause: &biodivine_lib_bdd::BddPartialValuation) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_dnf(&self, dnf: &[biodivine_lib_bdd::BddPartialValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_dnf_ref(&self, dnf: &[&biodivine_lib_bdd::BddPartialValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_dnf_valuation(&self, dnf: &[biodivine_lib_bdd::BddValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_dnf_valuation_ref(&self, dnf: &[&biodivine_lib_bdd::BddValuation]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_false(&self) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_literal(&self, var: biodivine_lib_bdd::BddVariable, value: bool) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_not_var(&self, var: biodivine_lib_bdd::BddVariable) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_not_var_by_name(&self, var: &str) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_sat_exactly_k(&self, k: usize, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_sat_up_to_k(&self, k: usize, variables: &[biodivine_lib_bdd::BddVariable]) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_true(&self) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_var(&self, var: biodivine_lib_bdd::BddVariable) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::mk_var_by_name(&self, var: &str) -> biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::BddVariableSet::name_of(&self, variable: biodivine_lib_bdd::BddVariable) -> alloc::string::String
pub fn biodivine_lib_bdd::BddVariableSet::name_of_str(&self, variable: biodivine_lib_bdd::BddVariable) -> &str
pub fn biodivine_lib_bdd::BddVariableSet::new(vars: &[&str]) -> biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::new_anonymous(num_vars: u16) -> biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::num_vars(&self) -> u16
pub fn biodivine_lib_bdd::BddVariableSet::transfer_from(&self, bdd: &biodivine_lib_bdd::Bdd, ctx: &biodivine_lib_bdd::BddVariableSet) -> core::option::Option<biodivine_lib_bdd::Bdd>
pub fn biodivine_lib_bdd::BddVariableSet::var_by_name(&self, name: &str) -> core::option::Option<biodivine_lib_bdd::BddVariable>
pub fn biodivine_lib_bdd::BddVariableSet::variable_name_assignment(&self) -> std::collections::hash::map::HashMap<biodivine_lib_bdd::BddVariable, alloc::string::String>
pub fn biodivine_lib_bdd::BddVariableSet::variable_names(&self) -> alloc::vec::Vec<alloc::string::String>
pub fn biodivine_lib_bdd::BddVariableSet::variable_names_ref(&self) -> &[alloc::string::String]
pub fn biodivine_lib_bdd::BddVariableSet::variables(&self) -> alloc::vec::Vec<biodivine_lib_bdd::BddVariable>
impl core::convert::From<alloc::vec::Vec<&str>> for biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::from(value: alloc::vec::Vec<&str>) -> Self
impl core::convert::From<alloc::vec::Vec<alloc::string::String>> for biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::from(value: alloc::vec::Vec<alloc::string::String>) -> Self
impl core::fmt::Display for biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::result::Result<(), core::fmt::Error>
impl core::iter::traits::collect::FromIterator<alloc::string::String> for biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSet::from_iter<T: core::iter::traits::collect::IntoIterator<Item = alloc::string::String>>(iter: T) -> Self
pub struct biodivine_lib_bdd::BddVariableSetBuilder
impl biodivine_lib_bdd::BddVariableSetBuilder
pub fn biodivine_lib_bdd::BddVariableSetBuilder::build(self) -> biodivine_lib_bdd::BddVariableSet
pub fn biodivine_lib_bdd::BddVariableSetBuilder::make<const X: usize>(&mut self, names: &[&str; X]) -> [biodivine_lib_bdd::BddVariable; X]
pub fn biodivine_lib_bdd::BddVariableSetBuilder::make_variable(&mut self, name: &str) -> biodivine_lib_bdd::BddVariable
pub fn biodivine_lib_bdd::BddVariableSetBuilder::make_variables(&mut self, names: &[&str]) -> alloc::vec::Vec<biodivine_lib_bdd::BddVariable>
pub fn biodivine_lib_bdd::BddVariableSetBuilder::new() -> biodivine_lib_bdd::BddVariableSetBuilder
impl core::default::Default for biodivine_lib_bdd::BddVariableSetBuilder
pub fn biodivine_lib_bdd::BddVariableSetBuilder::default() -> Self
pub struct biodivine_lib_bdd::OwnedBddPathIterator
impl biodivine_lib_bdd::OwnedBddPathIterator
pub fn biodivine_lib_bdd::OwnedBddPathIterator::new(bdd: biodivine_lib_bdd::Bdd) -> biodivine_lib_bdd::OwnedBddPathIterator
impl core::convert::From<biodivine_lib_bdd::Bdd> for biodivine_lib_bdd::OwnedBddPathIterator
pub fn biodivine_lib_bdd::OwnedBddPathIterator::from(value: biodivine_lib_bdd::Bdd) -> Self
impl core::convert::From<biodivine_lib_bdd::OwnedBddPathIterator> for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from(value: biodivine_lib_bdd::OwnedBddPathIterator) -> Self
impl core::iter::traits::iterator::Iterator for biodivine_lib_bdd::OwnedBddPathIterator
pub type biodivine_lib_bdd::OwnedBddPathIterator::Item = biodivine_lib_bdd::BddPartialValuation
pub fn biodivine_lib_bdd::OwnedBddPathIterator::next(&mut self) -> core::option::Option<Self::Item>
pub struct biodivine_lib_bdd::OwnedBddSatisfyingValuations
impl core::convert::From<biodivine_lib_bdd::Bdd> for biodivine_lib_bdd::OwnedBddSatisfyingValuations
pub fn biodivine_lib_bdd::OwnedBddSatisfyingValuations::from(value: biodivine_lib_bdd::Bdd) -> Self
impl core::convert::From<biodivine_lib_bdd::OwnedBddSatisfyingValuations> for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::from(value: biodivine_lib_bdd::OwnedBddSatisfyingValuations) -> Self
impl core::iter::traits::iterator::Iterator for biodivine_lib_bdd::OwnedBddSatisfyingValuations
pub type biodivine_lib_bdd::OwnedBddSatisfyingValuations::Item = biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::OwnedBddSatisfyingValuations::next(&mut self) -> core::option::Option<Self::Item>
pub struct biodivine_lib_bdd::ValuationsOfClauseIterator
impl biodivine_lib_bdd::ValuationsOfClauseIterator
pub fn biodivine_lib_bdd::ValuationsOfClauseIterator::empty() -> biodivine_lib_bdd::ValuationsOfClauseIterator
pub fn biodivine_lib_bdd::ValuationsOfClauseIterator::new(clause: biodivine_lib_bdd::BddPartialValuation, num_vars: u16) -> biodivine_lib_bdd::ValuationsOfClauseIterator
pub fn biodivine_lib_bdd::ValuationsOfClauseIterator::new_unconstrained(num_vars: u16) -> biodivine_lib_bdd::ValuationsOfClauseIterator
impl core::iter::traits::iterator::Iterator for biodivine_lib_bdd::ValuationsOfClauseIterator
pub type biodivine_lib_bdd::ValuationsOfClauseIterator::Item = biodivine_lib_bdd::BddValuation
pub fn biodivine_lib_bdd::ValuationsOfClauseIterator::next(&mut self) -> core::option::Option<Self::Item>
pub trait biodivine_lib_bdd::IntoBdd
pub fn biodivine_lib_bdd::IntoBdd::into_bdd(self, variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::IntoBdd for &biodivine_lib_bdd::Bdd
pub fn &biodivine_lib_bdd::Bdd::into_bdd(self, _variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::IntoBdd for &str
pub fn &str::into_bdd(self, variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::IntoBdd for biodivine_lib_bdd::Bdd
pub fn biodivine_lib_bdd::Bdd::into_bdd(self, _variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd
impl biodivine_lib_bdd::IntoBdd for biodivine_lib_bdd::BddVariable
pub fn biodivine_lib_bdd::BddVariable::into_bdd(self, variables: &biodivine_lib_bdd::BddVariableSet) -> biodivine_lib_bdd::Bdd

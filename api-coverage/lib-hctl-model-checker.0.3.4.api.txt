pub mod biodivine_hctl_model_checker
pub mod biodivine_hctl_model_checker::analysis
pub fn biodivine_hctl_model_checker::analysis::analyse_formula(bn: &biodivine_lib_param_bn::BooleanNetwork, formula: alloc::string::String, print_opt: biodivine_hctl_model_checker::result_print::PrintOptions, result_zip: core::option::Option<alloc::string::String>, context_archive_path: core::option::Option<alloc::string::String>) -> core::result::Result<(), alloc::string::String>
pub fn biodivine_hctl_model_checker::analysis::analyse_formulae(bn: &biodivine_lib_param_bn::BooleanNetwork, formulae: alloc::vec::Vec<alloc::string::String>, print_opt: biodivine_hctl_model_checker::result_print::PrintOptions, result_zip: core::option::Option<alloc::string::String>, context_archive_path: core::option::Option<alloc::string::String>) -> core::result::Result<(), alloc::string::String>
pub mod biodivine_hctl_model_checker::evaluation
pub mod biodivine_hctl_model_checker::evaluation::algorithm
pub fn biodivine_hctl_model_checker::evaluation::algorithm::compute_steady_states(graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices
pub fn biodivine_hctl_model_checker::evaluation::algorithm::eval_node<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(node: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, eval_context: &mut biodivine_hctl_model_checker::evaluation::eval_context::EvalContext, steady_states: &biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, progress_callback: &mut F) -> biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices
pub mod biodivine_hctl_model_checker::evaluation::eval_context
pub struct biodivine_hctl_model_checker::evaluation::eval_context::EvalContext
pub biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::cache: std::collections::hash::map::HashMap<biodivine_hctl_model_checker::evaluation::FormulaWithDomains, (biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, biodivine_hctl_model_checker::evaluation::VarRenameMap)>
pub biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::domain_raw_sets: biodivine_hctl_model_checker::evaluation::LabelToSetMap
pub biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::duplicates: std::collections::hash::map::HashMap<biodivine_hctl_model_checker::evaluation::FormulaWithDomains, i32>
pub biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::free_var_domains: biodivine_hctl_model_checker::evaluation::VarDomainMap
impl biodivine_hctl_model_checker::evaluation::eval_context::EvalContext
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::extend_context_with_wild_cards(&mut self, subst_context_properties: &biodivine_hctl_model_checker::evaluation::LabelToSetMap, subst_context_domains: &biodivine_hctl_model_checker::evaluation::LabelToSetMap)
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::from_multiple_trees(trees: &alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>) -> biodivine_hctl_model_checker::evaluation::eval_context::EvalContext
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::from_single_tree(tree: &biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode) -> biodivine_hctl_model_checker::evaluation::eval_context::EvalContext
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::get_cache(&self) -> &std::collections::hash::map::HashMap<biodivine_hctl_model_checker::evaluation::FormulaWithDomains, (biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, biodivine_hctl_model_checker::evaluation::VarRenameMap)>
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::get_domain_raw_sets(&self) -> &biodivine_hctl_model_checker::evaluation::LabelToSetMap
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::get_duplicates(&self) -> &std::collections::hash::map::HashMap<biodivine_hctl_model_checker::evaluation::FormulaWithDomains, i32>
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::get_free_var_domains(&self) -> &biodivine_hctl_model_checker::evaluation::VarDomainMap
pub fn biodivine_hctl_model_checker::evaluation::eval_context::EvalContext::new(duplicates: std::collections::hash::map::HashMap<biodivine_hctl_model_checker::evaluation::FormulaWithDomains, i32>) -> biodivine_hctl_model_checker::evaluation::eval_context::EvalContext
pub mod biodivine_hctl_model_checker::evaluation::mark_duplicates
pub fn biodivine_hctl_model_checker::evaluation::mark_duplicates::mark_duplicates_canonized_multiple(root_nodes: &alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>) -> std::collections::hash::map::HashMap<biodivine_hctl_model_checker::evaluation::FormulaWithDomains, i32>
pub fn biodivine_hctl_model_checker::evaluation::mark_duplicates::mark_duplicates_canonized_single(root_node: &biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode) -> std::collections::hash::map::HashMap<biodivine_hctl_model_checker::evaluation::FormulaWithDomains, i32>
pub type biodivine_hctl_model_checker::evaluation::FormulaWithDomains = (alloc::string::String, biodivine_hctl_model_checker::evaluation::VarDomainMap)
pub type biodivine_hctl_model_checker::evaluation::LabelToSetMap = std::collections::hash::map::HashMap<alloc::string::String, biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>
pub type biodivine_hctl_model_checker::evaluation::VarDomainMap = alloc::collections::btree::map::BTreeMap<alloc::string::String, core::option::Option<alloc::string::String>>
pub type biodivine_hctl_model_checker::evaluation::VarRenameMap = std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>
pub mod biodivine_hctl_model_checker::generate_output
pub fn biodivine_hctl_model_checker::generate_output::build_initial_archive(archive_name: &str, original_model_str: &str, formulae: alloc::vec::Vec<alloc::string::String>) -> core::result::Result<(), std::io::error::Error>
pub fn biodivine_hctl_model_checker::generate_output::build_result_archive(results: biodivine_hctl_model_checker::evaluation::LabelToSetMap, archive_name: &str, original_model_str: &str, formulae: alloc::vec::Vec<alloc::string::String>) -> core::result::Result<(), std::io::error::Error>
pub mod biodivine_hctl_model_checker::load_inputs
pub fn biodivine_hctl_model_checker::load_inputs::load_bdd_bundle(archive_path: &str, symbolic_context: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicContext) -> core::result::Result<biodivine_hctl_model_checker::evaluation::LabelToSetMap, alloc::string::String>
pub fn biodivine_hctl_model_checker::load_inputs::load_formulae(formulae_path: &str) -> core::result::Result<alloc::vec::Vec<alloc::string::String>, alloc::string::String>
pub mod biodivine_hctl_model_checker::mc_utils
pub fn biodivine_hctl_model_checker::mc_utils::check_hctl_var_support(stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, hctl_syntactic_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode) -> bool
pub fn biodivine_hctl_model_checker::mc_utils::collect_unique_hctl_vars(formula_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode) -> std::collections::hash::set::HashSet<alloc::string::String>
pub fn biodivine_hctl_model_checker::mc_utils::collect_unique_wild_cards(formula_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode) -> (std::collections::hash::set::HashSet<alloc::string::String>, std::collections::hash::set::HashSet<alloc::string::String>)
pub fn biodivine_hctl_model_checker::mc_utils::get_extended_symbolic_graph(bn: &biodivine_lib_param_bn::BooleanNetwork, num_hctl_vars: u16) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, alloc::string::String>
pub mod biodivine_hctl_model_checker::model_checking
pub fn biodivine_hctl_model_checker::model_checking::_model_check_extended_formula<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula: &str, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap, progress_callback: &mut F) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_extended_formula_dirty<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula: &str, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap, progress_callback: &mut F) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_formula<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula: &str, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_formula_dirty<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula: &str, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_multiple_extended_formulae<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formulae: alloc::vec::Vec<&str>, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap, progress_callback: &mut F) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_multiple_extended_formulae_dirty<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formulae: alloc::vec::Vec<&str>, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap, progress_callback: &mut F) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_multiple_formulae<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formulae: alloc::vec::Vec<&str>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_multiple_formulae_dirty<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formulae: alloc::vec::Vec<&str>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_multiple_trees<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula_trees: alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_multiple_trees_dirty<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula_trees: alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_tree<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::_model_check_tree_dirty<F: core::ops::function::FnMut(&biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, &str)>(formula_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, progress_callback: &mut F) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_extended_formula(formula: &str, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_extended_formula_dirty(formula: &str, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_formula(formula: &str, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_formula_dirty(formula: &str, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_formula_unsafe_ex(formula: &str, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_multiple_extended_formulae(formulae: alloc::vec::Vec<&str>, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_multiple_extended_formulae_dirty(formulae: alloc::vec::Vec<&str>, stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_multiple_formulae(formulae: alloc::vec::Vec<&str>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_multiple_formulae_dirty(formulae: alloc::vec::Vec<&str>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_multiple_trees(formula_trees: alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_multiple_trees_dirty(formula_trees: alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<alloc::vec::Vec<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices>, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_tree(formula_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub fn biodivine_hctl_model_checker::model_checking::model_check_tree_dirty(formula_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, graph: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph) -> core::result::Result<biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices, alloc::string::String>
pub mod biodivine_hctl_model_checker::postprocessing
pub mod biodivine_hctl_model_checker::postprocessing::sanitizing
pub fn biodivine_hctl_model_checker::postprocessing::sanitizing::sanitize_colored_vertices(stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, colored_vertices: &biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices) -> biodivine_lib_param_bn::symbolic_async_graph::GraphColoredVertices
pub fn biodivine_hctl_model_checker::postprocessing::sanitizing::sanitize_colors(stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, colors: &biodivine_lib_param_bn::symbolic_async_graph::GraphColors) -> biodivine_lib_param_bn::symbolic_async_graph::GraphColors
pub fn biodivine_hctl_model_checker::postprocessing::sanitizing::sanitize_vertices(stg: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicAsyncGraph, vertices: &biodivine_lib_param_bn::symbolic_async_graph::GraphVertices) -> biodivine_lib_param_bn::symbolic_async_graph::GraphVertices
pub mod biodivine_hctl_model_checker::preprocessing
pub mod biodivine_hctl_model_checker::preprocessing::hctl_tree
pub enum biodivine_hctl_model_checker::preprocessing::hctl_tree::NodeType
pub biodivine_hctl_model_checker::preprocessing::hctl_tree::NodeType::Binary(biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp, alloc::boxed::Box<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>, alloc::boxed::Box<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>)
pub biodivine_hctl_model_checker::preprocessing::hctl_tree::NodeType::Hybrid(biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp, alloc::string::String, core::option::Option<alloc::string::String>, alloc::boxed::Box<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>)
pub biodivine_hctl_model_checker::preprocessing::hctl_tree::NodeType::Terminal(biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic)
pub biodivine_hctl_model_checker::preprocessing::hctl_tree::NodeType::Unary(biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp, alloc::boxed::Box<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode>)
pub struct biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::formula_str: alloc::string::String
pub biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::height: u32
pub biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::node_type: biodivine_hctl_model_checker::preprocessing::hctl_tree::NodeType
impl biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::as_str(&self) -> &str
impl biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::from_tokens(tokens: &[biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken]) -> core::result::Result<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::mk_binary(left: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, right: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, op: biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::mk_constant(constant_val: bool) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::mk_hybrid(child: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, var: &str, domain: core::option::Option<alloc::string::String>, op: biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::mk_proposition(prop_name: &str) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::mk_unary(child: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, op: biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::mk_variable(var_name: &str) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::mk_wild_card(prop_name: &str) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::new_random_boolean(tree_height: u8, propositions: &alloc::vec::Vec<alloc::string::String>, seed: u64) -> biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
impl core::fmt::Display for biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode
pub fn biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub mod biodivine_hctl_model_checker::preprocessing::operator_enums
pub enum biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic
pub biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic::False
pub biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic::Prop(alloc::string::String)
pub biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic::True
pub biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic::Var(alloc::string::String)
pub biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic::WildCardProp(alloc::string::String)
impl core::convert::From<bool> for biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic
pub fn biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic::from(value: bool) -> Self
impl core::fmt::Display for biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic
pub fn biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub enum biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::AU
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::AW
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::And
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::EU
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::EW
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::Iff
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::Imp
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::Or
pub biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::Xor
impl core::fmt::Display for biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp
pub fn biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub enum biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp
pub biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp::Bind
pub biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp::Exists
pub biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp::Forall
pub biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp::Jump
impl core::fmt::Display for biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp
pub fn biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub enum biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp
pub biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::AF
pub biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::AG
pub biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::AX
pub biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::EF
pub biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::EG
pub biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::EX
pub biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::Not
impl core::fmt::Display for biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp
pub fn biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub mod biodivine_hctl_model_checker::preprocessing::parser
pub fn biodivine_hctl_model_checker::preprocessing::parser::parse_and_minimize_extended_formula(symbolic_context: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicContext, formula: &str) -> core::result::Result<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::parser::parse_and_minimize_hctl_formula(symbolic_context: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicContext, formula: &str) -> core::result::Result<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::parser::parse_extended_formula(formula: &str) -> core::result::Result<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::parser::parse_hctl_formula(formula: &str) -> core::result::Result<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::parser::parse_hctl_tokens(tokens: &[biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken]) -> core::result::Result<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, alloc::string::String>
pub mod biodivine_hctl_model_checker::preprocessing::tokenizer
pub enum biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken
pub biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken::Atom(biodivine_hctl_model_checker::preprocessing::operator_enums::Atomic)
pub biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken::Binary(biodivine_hctl_model_checker::preprocessing::operator_enums::BinaryOp)
pub biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken::Hybrid(biodivine_hctl_model_checker::preprocessing::operator_enums::HybridOp, alloc::string::String, core::option::Option<alloc::string::String>)
pub biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken::Tokens(alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken>)
pub biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken::Unary(biodivine_hctl_model_checker::preprocessing::operator_enums::UnaryOp)
impl core::fmt::Display for biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken
pub fn biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
pub fn biodivine_hctl_model_checker::preprocessing::tokenizer::print_tokens(tokens: &alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken>)
pub fn biodivine_hctl_model_checker::preprocessing::tokenizer::try_tokenize_extended_formula(formula: alloc::string::String) -> core::result::Result<alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken>, alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::tokenizer::try_tokenize_formula(formula: alloc::string::String) -> core::result::Result<alloc::vec::Vec<biodivine_hctl_model_checker::preprocessing::tokenizer::HctlToken>, alloc::string::String>
pub mod biodivine_hctl_model_checker::preprocessing::utils
pub fn biodivine_hctl_model_checker::preprocessing::utils::validate_and_divide_wild_cards(tree: &biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap) -> core::result::Result<(biodivine_hctl_model_checker::evaluation::LabelToSetMap, biodivine_hctl_model_checker::evaluation::LabelToSetMap), alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::utils::validate_props_and_rename_vars(orig_tree: biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, symbolic_context: &biodivine_lib_param_bn::symbolic_async_graph::SymbolicContext) -> core::result::Result<biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, alloc::string::String>
pub fn biodivine_hctl_model_checker::preprocessing::utils::validate_wild_cards(tree: &biodivine_hctl_model_checker::preprocessing::hctl_tree::HctlTreeNode, context_sets: &biodivine_hctl_model_checker::evaluation::LabelToSetMap) -> core::result::Result<(), alloc::string::String>
pub mod biodivine_hctl_model_checker::result_print
pub enum biodivine_hctl_model_checker::result_print::PrintOptions
pub biodivine_hctl_model_checker::result_print::PrintOptions::Exhaustive
pub biodivine_hctl_model_checker::result_print::PrintOptions::JustSummary
pub biodivine_hctl_model_checker::result_print::PrintOptions::NoPrint
pub biodivine_hctl_model_checker::result_print::PrintOptions::WithProgress
